# Copyright (c) 2025 [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

name: build-runtime-packages

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild and overwrite existing runtime packages'
        type: boolean
        default: false

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

env:
  CACHE_VER: 1
  VERBOSE: no
  RUNTIME_REPO: tamatebako/tebako-runtime-ruby

jobs:
  prepare:
    name: Prepare build matrix
    runs-on: ubuntu-latest
    outputs:
      tebako-version: ${{ steps.get-version.outputs.version }}
      env-matrix: ${{ steps.set-matrix.outputs.env-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: Get Tebako version
        id: get-version
        run: |
          gem install tebako
          version=$(gem info tebako | head -n 1 | awk -F'[()]' '{print $2}')
          echo "Building runtimes for Tebako version $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Generate build matrix
        id: set-matrix
        env:
          TEBAKO_VERSION: ${{ steps.get-version.outputs.version }}
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild == 'true' }}
        run: |
          echo "Validating matrix.json..."
          if ! jq empty .github/matrix.json 2>/dev/null; then
            echo "Error: Invalid JSON in matrix.json"
            exit 1
          fi

          # Read and validate the env section
          echo "Extracting env section..."
          env=$(jq -c ".env" .github/matrix.json)
          if [[ -z "$env" || "$env" == "null" ]]; then
            echo "Error: No env section found in matrix.json"
            echo "matrix.json content:"
            cat .github/matrix.json
            exit 1
          fi

          echo "Validating env section format..."
          if ! echo "$env" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON in env section"
            echo "env section content:"
            echo "$env"
            exit 1
          fi

          echo "env-matrix=$env" >> $GITHUB_OUTPUT
          echo "Generated matrix:"
          echo "$env" | jq .
  build:
    name: Build runtime packages for ${{ matrix.env.os }} / ${{ matrix.env.arch }}
    needs: prepare
    runs-on: ${{ matrix.env.host }}
    strategy:
      fail-fast: false
      matrix:
        env: ${{fromJson(needs.prepare.outputs.env-matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Create folder for runtime packages
        run: |
          mkdir -p runtime-packages

      - name: Build runtimes using ci container
        if: matrix.env.container != null
        run: |
          container="ghcr.io/tamatebako/tebako-${{ matrix.env.container }}:${{ needs.prepare.outputs.tebako-version }}"
          ruby_versions=$(jq -r '.ruby[]' .github/matrix.json | tr '\n' ' ')
          for ruby_ver in $ruby_versions; do
            echo "Building runtime for Ruby $ruby_ver on ${{ matrix.env.os }}/${{ matrix.env.arch }}"
            runtime="tebako-runtime-${{ needs.prepare.outputs.tebako-version }}-$ruby_ver-${{ matrix.env.os }}-${{ matrix.env.arch }}"
            docker run -v ${{github.workspace}}:/mnt/w -t $container \
              tebako press -m runtime -o="/mnt/w/runtime-packages/$runtime" -R=${ruby_ver} ${{ matrix.env.os == 'linux-gnu' && '--patchelf' || '' }}
          done

      - name: Setup MSys
        if: matrix.env.os == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          path-type: minimal
          update: true
          pacboy: >-
            jq:p

      - name: Setup Tebako
        if: matrix.env.container == null
        uses: tamatebako/tebako/.github/actions/setup-tebako@main
        with:
          cache: build
          cache_ver: ${{ env.CACHE_VER }}
          cache_path: .tebako

      - name: Build runtimes using gem
        if: matrix.env.container == null && matrix.env.os != 'windows'
        run: |
          ruby_versions=$(jq -r '.ruby[]' .github/matrix.json | tr '\n' ' ')
          for ruby_ver in $ruby_versions; do
            echo "Building runtime for Ruby $ruby_ver on ${{ matrix.env.os }}/${{ matrix.env.arch }}"
            runtime="tebako-runtime-${{ needs.prepare.outputs.tebako-version }}-$ruby_ver-${{ matrix.env.os }}-${{ matrix.env.arch }}"
            tebako press -m runtime -o="runtime-packages/$runtime" -R=${ruby_ver}
          done

      - name: Build runtimes using gem on Windows
        if: matrix.env.container == null && matrix.env.os == 'windows'
        shell: msys2 {0}
        run: |
          git config --global core.longpaths true
          ruby_versions=$(jq -r '.ruby[]' .github/matrix.json | tr '\n' ' ')
          for ruby_ver in $ruby_versions; do
            echo "Building runtime for Ruby $ruby_ver on ${{ matrix.env.os }}/${{ matrix.env.arch }}"
            runtime="tebako-runtime-${{ needs.prepare.outputs.tebako-version }}-$ruby_ver-${{ matrix.env.os }}-${{ matrix.env.arch }}"
            ruby tebako press -m runtime -o="runtime-packages/$runtime" -R=${ruby_ver} -p .tebako
          done

      - name: Upload runtime package
        uses: actions/upload-artifact@v4
        with:
          name: runtime-packages-${{ matrix.env.os }}-${{ matrix.env.arch }}
          path: runtime-packages/*
          retention-days: 1

  release:
    name: Update release packages
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Download all runtime packages
        uses: actions/download-artifact@v4
        with:
          path: runtime-packages
          merge-multiple: true

      - name: Setup Ruby gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Update release using Ruby script
        env:
          TEBAKO_VERSION: ${{ needs.prepare.outputs.tebako-version }}
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild == 'true' }}
        run: |
          ./upload_release.rb
